#pragma once

#include <atomic>
#include <stdio.h>
#include <QObject>


namespace wpn114
{

// ================================================================================================
template<typename T = double>
class rbuffer
// ================================================================================================
{

public:

    // --------------------------------------------------------------------------------------------
    void*
    operator new(size_t size)
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    bool
    can_read(size_t nframes) const { return can_read() <= nframes; }

    // --------------------------------------------------------------------------------------------
    size_t
    can_read() const
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    size_t
    can_write() const
    // --------------------------------------------------------------------------------------------
    {

    }

    bool
    can_write(size_t nframes) const { return can_write() <= nframes; }

    // --------------------------------------------------------------------------------------------
    size_t
    read(T** data, size_t nframes)
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    size_t
    peek(T** data, size_t nframes) const
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    size_t
    write(T** source, size_t nframes)
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    void
    read_fwd(size_t nframes)
    // --------------------------------------------------------------------------------------------
    {

    }

    // --------------------------------------------------------------------------------------------
    void
    write_fwd(size_t nframes)
    // --------------------------------------------------------------------------------------------
    {

    }

private:

    // --------------------------------------------------------------------------------------------
    std::atomic<size_t>
    w_index, r_index;

    // --------------------------------------------------------------------------------------------
    size_t
    size, size_mask;

    // --------------------------------------------------------------------------------------------
    T m_data[0];
};



}
